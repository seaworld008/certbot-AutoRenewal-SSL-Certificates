# nginx.example.conf
# Nginx 配置示例，演示如何配置 SSL 证书和 HTTP-01 验证
# 
# 说明：
# 1. 此配置适用于使用 cert-manager.sh 脚本自动续签 SSL 证书的场景
# 2. 需要根据您的实际域名和路径进行修改
# 3. 确保 webroot 路径与 cert-manager.sh 中的配置一致

###############################################################################
# 示例1：单域名 HTTPS 配置
###############################################################################

# HTTP 重定向到 HTTPS，同时支持 ACME 验证
server {
    listen 80;
    server_name example.com www.example.com;
    
    # ACME HTTP-01 验证路径
    location /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri =404;
    }
    
    # 其他所有请求重定向到 HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS 配置
server {
    listen 443 ssl http2;
    server_name example.com www.example.com;
    
    # SSL 证书配置
    ssl_certificate /etc/nginx/ssl/example.com.pem;
    ssl_certificate_key /etc/nginx/ssl/example.com.key;
    
    # SSL 安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # 安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    
    # 网站根目录
    root /var/www/html;
    index index.html index.htm index.php;
    
    location / {
        try_files $uri $uri/ =404;
    }
    
    # PHP 支持（如需要）
    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

###############################################################################
# 示例2：多域名配置
###############################################################################

# API 服务
server {
    listen 80;
    server_name api.example.com;
    
    location /.well-known/acme-challenge/ {
        root /var/www/api;
    }
    
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name api.example.com;
    
    ssl_certificate /etc/nginx/ssl/api.example.com.pem;
    ssl_certificate_key /etc/nginx/ssl/api.example.com.key;
    
    # SSL 配置（同上）
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # 反向代理到后端 API 服务
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# 管理后台
server {
    listen 80;
    server_name admin.example.com;
    
    location /.well-known/acme-challenge/ {
        root /var/www/admin;
    }
    
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name admin.example.com;
    
    ssl_certificate /etc/nginx/ssl/admin.example.com.pem;
    ssl_certificate_key /etc/nginx/ssl/admin.example.com.key;
    
    # SSL 配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    root /var/www/admin;
    index index.html;
    
    location / {
        try_files $uri $uri/ /index.html;
    }
}

###############################################################################
# 示例3：Docker 环境配置
###############################################################################

# 适用于 Docker 部署的配置
# 注意：webroot 路径应该映射到 Docker 容器内的路径

server {
    listen 80;
    server_name app.example.com;
    
    # 容器内的路径
    location /.well-known/acme-challenge/ {
        root /usr/share/nginx/html;
    }
    
    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    listen 443 ssl http2;
    server_name app.example.com;
    
    # 证书路径（挂载到容器内）
    ssl_certificate /etc/nginx/ssl/app.example.com.pem;
    ssl_certificate_key /etc/nginx/ssl/app.example.com.key;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # 反向代理到应用容器
    location / {
        proxy_pass http://app:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

###############################################################################
# SSL 配置最佳实践
###############################################################################

# 全局 SSL 配置（可以放在 http 块中）
# ssl_session_cache shared:SSL:50m;
# ssl_session_timeout 1d;
# ssl_session_tickets off;
# 
# # 现代浏览器兼容的安全配置
# ssl_protocols TLSv1.2 TLSv1.3;
# ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
# ssl_prefer_server_ciphers off;
# 
# # HSTS
# add_header Strict-Transport-Security "max-age=63072000" always;
# 
# # OCSP Stapling
# ssl_stapling on;
# ssl_stapling_verify on;

###############################################################################
# Docker Compose 示例
###############################################################################

# version: '3.8'
# services:
#   nginx:
#     image: nginx:1.24-alpine
#     container_name: nginx
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf
#       - ./sites:/etc/nginx/conf.d
#       - /home/docker/nginx/cert:/etc/nginx/ssl
#       - /home/projects:/usr/share/nginx/html
#     restart: unless-stopped
#     networks:
#       - web
# 
# networks:
#   web:
#     external: true

###############################################################################
# 重要提醒
###############################################################################

# 1. webroot 路径配置
#    - cert-manager.sh 中的 webroot 路径必须与 Nginx 配置中的路径一致
#    - 确保 /.well-known/acme-challenge/ 目录可写
# 
# 2. 证书路径配置
#    - 证书文件路径必须与 cert-manager.sh 中的目标证书目录一致
#    - 确保 Nginx 有读取证书文件的权限
# 
# 3. 权限设置
#    - webroot 目录：755 权限，www-data 用户
#    - 证书目录：755 权限，root 用户
#    - 证书文件：644 权限
#    - 私钥文件：600 权限
# 
# 4. 测试配置
#    - nginx -t  # 测试配置文件语法
#    - nginx -s reload  # 重载配置
# 
# 5. 防火墙设置
#    - 确保 80 和 443 端口已开放
#    - ufw allow 80/tcp
#    - ufw allow 443/tcp 